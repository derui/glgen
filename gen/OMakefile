########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#

.PHONY: gen-library

#
# This project requires ocamlfind (default - false).
#
USE_OCAMLFIND = true
#
OCAMLPACKS[] =
	core
	ctypes
	ctypes.foreign
	xml-light

#
if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

#
# Include path
#
OCAMLINCLUDES +=

#
# Compile native or byte code?
#
# The default values are defined as follows:
#
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

#
# Various options
#
OCAMLFLAGS    += -thread -g
# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
OCAML_LINK_FLAGS += -linkall
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build bindings for OCaml to C.
#
PROGRAM = gen_gl$(EXE)
FILES[]=
    main
    glreg_parser
    command
    enum
    groups
    capi
    util
    gen_mli
    gen_ml
    gen_enum
    special_defs

OCamlProgram(gen_gl, $(FILES))

gl_versions[] =
	3 2
	3 3
	4 0
	4 1
	4 2
	4 3
	4 4
	4 5

foreach(x => ..., $(gl_versions))
	section:
		private.major = $(nth 0, $x)
		private.minor = $(nth 1, $x)
		private.LIB = ogl_$(major)_$(minor)
		private.ENUM = ogl_enum_$(major)_$(minor)

		$(file $(LIB).mli): $(PROGRAM) gl.xml
			./$< -type mli -major $(major) -minor $(minor) gl.xml > $@
		export

		$(file $(LIB).ml): $(PROGRAM) gl.xml
			./$< gl.xml -type ml -major $(major) -minor $(minor) gl.xml > $@
		export

		$(file $(ENUM).ml): $(PROGRAM) gl.xml
			./$< gl.xml -type enum -major $(major) -minor $(minor) gl.xml > $@
		export

		MyOCamlLibrary($(LIB), $(LIB) $(ENUM))
		gen-library: $(OCamlLibrary $(LIB), $(LIB) $(ENUM)) $(file $(ENUM).ml)
		export

#
# OCAML_LIBS += -custom
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS += camlidl
# OCAML_LIB_FLAGS += -cclib -lsdlcaml
#

gen: gen-library

.DEFAULT: gen

